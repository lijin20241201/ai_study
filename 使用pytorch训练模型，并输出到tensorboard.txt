import torch
import torchvision
import torchvision.transforms as transforms
from torch.utils.tensorboard import SummaryWriter
from datetime import datetime

transform = transforms.Compose(
    [transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))])
# Create datasets for training & validation, download if necessary
training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

# 创建训练，验证数据加载器，训练数据刷新，验证数据不用来更新参数，不用刷新
training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

#标签真实对应的 文本列表
classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
        'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')
print('Training set has {} instances'.format(len(training_set)))
print('Validation set has {} instances'.format(len(validation_set)))

import matplotlib.pyplot as plt
import numpy as np
# 显示图片的方法
def matplotlib_imshow(img, one_channel=False):
    if one_channel:
        img = img.mean(dim=0)
    img = img / 2 + 0.5     # unnormalize
    npimg = img.numpy()
    if one_channel:
        plt.imshow(npimg, cmap="Greys")
    else:
        plt.imshow(np.transpose(npimg, (1, 2, 0)))

dataiter = iter(training_loader)
images, labels = next(dataiter) #获取地一个迭代数据
#图片网格
img_grid = torchvision.utils.make_grid(images)
matplotlib_imshow(img_grid, one_channel=True)
print('  '.join(classes[labels[j]] for j in range(4)))

import torch.nn as nn
import torch.nn.functional as F

# PyTorch models inherit from torch.nn.Module
class GarmentClassifier(nn.Module):
    def __init__(self):
        super(GarmentClassifier, self).__init__()
        self.conv1 = nn.Conv2d(1, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 4 * 4, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 4 * 4)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x


model = GarmentClassifier()

loss_fn = torch.nn.CrossEntropyLoss()#损失函数
dummy_outputs = torch.rand(4, 10)#模拟的模型预测
dummy_labels = torch.tensor([1, 5, 3, 7]) #真实标签

print(dummy_outputs)
print(dummy_labels)

loss = loss_fn(dummy_outputs, dummy_labels) #计算损失
print('Total loss for this batch: {}'.format(loss.item()))

# Optimizers specified in the torch.optim package
optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)

def train_one_epoch(epoch_index, tb_writer): #训练一个轮次，参数：迭代索引，tensorboard写入器
    running_loss = 0.
    last_loss = 0.
    for i, data in enumerate(training_loader):
        inputs, labels = data #拆包每个批次的输入数据和标签
        optimizer.zero_grad() #梯度归0
        outputs = model(inputs)#根据输入数据获取模型预测
        loss = loss_fn(outputs, labels) #计算的是批次平均损失
        loss.backward() #反向链式求导
        optimizer.step() #更新参数
        running_loss += loss.item()#累计批次平均训练损失
        if i % 1000 == 999: #每隔1000批次
            last_loss = running_loss / 1000 # 因为累计的是1000个批次的平均批次损失，这里得到的是1000个批次的平均损失
            print('  batch {} loss: {}'.format(i + 1, last_loss))#打印批次，损失
            tb_x = epoch_index * len(training_loader) + i + 1#这里得到的是当前批次，是轮的累计
            tb_writer.add_scalar('Loss/train', last_loss, tb_x)# 写到tensorbord
            running_loss = 0.#归0,这样计算的是下一个1000批次，依次累推
    return last_loss

# 格式化时间
timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
#获取摘要写入器
writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
epoch_number = 0 #迭代当前轮次
EPOCHS = 5 #迭代次数
best_vloss = 1_000_000. #最好的验证损失
for epoch in range(EPOCHS):
    print('EPOCH {}:'.format(epoch_number + 1)) #打印当前轮次

    # 训练模式，可以更新参数w和b
    model.train(True)
    avg_loss = train_one_epoch(epoch_number, writer) #返回的是最后1000个批次的平均损失
    running_vloss = 0.0 #验证累计损失
    #设置测试模式
    model.eval()
    with torch.no_grad():
        for i, vdata in enumerate(validation_loader):#遍历数据生成器
            vinputs, vlabels = vdata #拆包验证输入和标签
            voutputs = model(vinputs) #获取模型推理结果
            vloss = loss_fn(voutputs, vlabels)#计算损失
            running_vloss += vloss#对批次平均损失累加
    print(i)
    avg_vloss = running_vloss / (i + 1)#计算验证集整体平均损失
    print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    #将训练平均损失，验证平均损失，当前轮次写入tensorboard日志
    writer.add_scalars('Training vs. Validation Loss',
                    { 'Training' : avg_loss, 'Validation' : avg_vloss },
                    epoch_number + 1)
    writer.flush() #刷新
    if avg_vloss < best_vloss:#判断验证损失小于best_loss(如果验证损失大于best，是不会保存的)
        best_vloss = avg_vloss #更新best_loss,确保bes_loss保存的是验证最小损失
        model_path = 'model_{}_{}'.format(timestamp, epoch_number) #根据当前时间和当前轮次设置保存路径
        torch.save(model.state_dict(), model_path) #保存模型静态字典
    epoch_number += 1 #计数器加1,其实完全可以用epoch变量

saved_model = GarmentClassifier()
saved_model.load_state_dict(torch.load(PATH))
