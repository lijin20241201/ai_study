import numpy as np
#获取矩阵的第i行，第j列的代数余子式
def get_dys(A,i,j):
    if len(A)!=len(A[0]):
        # 这里应该抛出异常的
        print('形状必须是方的')
    #删除i行
    sub_A=np.delete(A,i,axis=0)
    #删除j列
    sub_A=np.delete(sub_A,j,axis=1)
    #获取A[i,j]的余子式,记住:余子式，行列式都是数值
    sub_A_hs=np.linalg.det(sub_A)
    #返回A[i,j]的代数余子式，代数余子式就是在余子式
    #前面加符号，符号正负和当前元素的行列之和奇偶性有关
    if sub_A_hs:
        return (-1)**(i+j)*sub_A_hs
    else:
        return 0
# 获取伴随矩阵
def get_bs_jz(A):
    #创建（len(A),len(A)）空矩阵
    B=np.empty(shape=(len(A),len(A)))
    # 每次遍历都获得该行的代数余子式
    for i in range(len(A)):
        # 内层循环获得的是每一行每个元素的代数余子式
        for j in range(len(A)):
            B[i,j]=get_dys(A,i,j)
    #按行求，按列放，转置就行了
    return B.T
A=np.array([[1,1,1],[2,1,3],[1,1,4]])
E=np.eye(3)
A_bs=get_bs_jz(A)
A_hs=np.linalg.det(A)
A_bs_hs=np.linalg.det(A_bs)
# 检测伴随矩阵是否正确AA*=A*A=|A|E
# display(A_bs,np.round((A_bs@A).astype(float),5),np.round((A@A_bs).astype(float),5),A_hs*E)
# |A*|=|A|的n-1次幂
# display(A_bs_hs,A_hs**(3-1))
# A逆=1/A_hs*A_bs
A_n=1/A_hs*A_bs
# 检测逆矩阵AA^(-1)=A^(-1)A=E
A_n_hs=np.linalg.det(A_n)
# display(np.round(A_n@A,5),np.round(A@A_n),E,A_n_hs,1/A_hs)
#(A*)=|A|^(n-2)A,A伴随矩阵的伴随矩阵
A_bs_bs=A_hs**(3-2)*A
# display(A_bs_bs)
