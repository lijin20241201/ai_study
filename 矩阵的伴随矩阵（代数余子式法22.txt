import numpy as np
#获取矩阵的第i行，第j列的代数余子式
def get_dys(A,i,j):
    if len(A)!=len(A[0]):
        # 这里应该抛出异常的
        print('形状必须是方的')
    #删除i行
    sub_A=np.delete(A,i,axis=0)
    #删除j列
    sub_A=np.delete(sub_A,j,axis=1)
    #获取A[i,j]的余子式,记住:余子式，行列式都是数值
    sub_A_hs=np.linalg.det(sub_A)
    #返回A[i,j]的代数余子式，代数余子式就是在余子式
    #前面加符号，符号正负和当前元素的行列之和奇偶性有关
    if sub_A_hs:
        return (-1)**(i+j)*sub_A_hs
    else:
        return 0
# 获取伴随矩阵
def get_bs_jz(A):
    #创建（len(A),len(A)）空矩阵
    B=np.empty(shape=(len(A),len(A)))
    # 每次遍历都获得该行的代数余子式
    for i in range(len(A)):
        # 内层循环获得的是每一行每个元素的代数余子式
        for j in range(len(A)):
            B[i,j]=get_dys(A,i,j)
    #按行求，按列放，转置就行了
    return B.T
A=np.array([[1,1,1],[2,1,3],[1,1,4]])
E=np.eye(3)
A_bs=get_bs_jz(A)
A_hs=np.linalg.det(A)
A_bs_hs=np.linalg.det(A_bs)
# 检测伴随矩阵是否正确AA*=A*A=|A|E
# display(A_bs,np.round((A_bs@A).astype(float),5),np.round((A@A_bs).astype(float),5),A_hs*E)
# |A*|=|A|的n-1次幂
# display(A_bs_hs,A_hs**(3-1))
# A逆=1/A_hs*A_bs
A_n=1/A_hs*A_bs
# 检测逆矩阵AA^(-1)=A^(-1)A=E
A_n_hs=np.linalg.det(A_n)
# display(np.round(A_n@A,5),np.round(A@A_n),E,A_n_hs,1/A_hs)
#(A*)=|A|^(n-2)A,A伴随矩阵的伴随矩阵
A_bs_bs=A_hs**(3-2)*A
# display(A_bs_bs)
import numpy as np
# 单位矩阵
def eye_(n):
    A=np.zeros(shape=(n,n))
    for i in range(n):
        A[i,i]=1
    return A
E=np.eye(4)
#数量阵
#n形状，k数
def slz(k,n):
    return k*np.eye(n)
N_1=slz(3,4)
N_2=slz(5,4)
# 数量矩阵
# display(N_1@N_2)
def get_djz(n):
    A=np.zeros((n,n))
    # 对角阵
    for i in range(n):
        A[i,i]=np.random.randint(1,10)
    return A
D_1=get_djz(4)
D_2=get_djz(4)
# display(D_1,D_2)
#对角阵满足交换律，相加，相乘都是对角阵
# display(D_1,D_2,D_1@D_2,D_2@D_1)
A=np.random.randint(0,10,size=(4,4))
# display(D_1,A,D_1@A,A@D_1)
# 上三角
def get_ssj(n):
    A=np.random.randint(0,10,size=(n,n))
    for i in range(1,n):
        for j in range(i):
            A[i,j]=0
    return A
S_1=get_ssj(4)
S_2=get_ssj(4)
# display(S_1,S_2,S_1+S_2,S_1-S_2,S_1@S_2,S_2@S_1)
#下三角
def get_xsj(n):
    A=np.zeros(shape=(n,n))
    for i in range(n):
        for j in range(i+1):
            A[i,j]=np.random.randint(0,10)
    return A
S_3=get_xsj(4)
S_4=get_xsj(4)
# display(S_3,S_4,S_3+S_4,S_3-S_4,S_3@S_4,S_4@S_3)
# 对称矩阵
def get_dcjz(n):
    A=np.random.randint(0,10,size=(n,n))
    for i in range(1,n):
        for j in range(i):
            A[i,j]=A[j,i]
    return A
A_dc=get_dcjz(4)
#对称矩阵A=A.T
# display(A_dc,A_dc.T,np.all(A_dc==A_dc.T),np.allclose(A_dc,A_dc.T))
B_dc=get_dcjz(4)
C1=A_dc+B_dc
C2=A_dc-B_dc
C3=5*A_dc
C4=A_dc@B_dc
#对称矩阵的和，差，数乘都对称，乘积不再对称,因为(AB).T=B.TA.T
# display(np.allclose(C1,C1.T),np.allclose(C2,C2.T),np.allclose(C3,C3.T),np.allclose(C4,C4.T))
# 反对称矩阵
def get_fdcjz(n):
    A=np.random.randint(0,10,size=(n,n))
    for i in range(n):
        A[i,i]=0
        if i!=0:
            for j in range(i):
                    A[i,j]=-A[j,i]
    return A
B_fdc=get_fdcjz(10)
A_fdc=get_fdcjz(10)
# 反对称矩阵B=-B.T
# display(B_fdc,-B_fdc.T,np.all(B_fdc==-B_fdc.T),np.allclose(B_fdc,-B_fdc.T))
C1=A_fdc+B_fdc
C2=A_fdc-B_fdc
C3=5*A_fdc
C4=A_fdc@B_fdc
#反对称矩阵的和，差，数乘都反对称，乘积不再反对称,因为(AB).T=B.TA.T
# display(np.allclose(C1,-C1.T),np.allclose(C2,-C2.T),np.allclose(C3,-C3.T),np.allclose(C4,-C4.T))


